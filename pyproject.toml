[tool.poetry]
name = "autochain-bot"
version = "0.1.0"
description = ""
license = "MIT"
authors = ["Juan Pablo Cadena Aguilar <jpcadena@espol.edu.ec>"]
maintainers = [
    "Juan Pablo Cadena Aguilar <jpcadena@espol.edu.ec>"
]
readme = "README.md"
homepage = "https://github.com/jpcadena/autochain-bot"
repository = "https://github.com/jpcadena/autochain-bot"
documentation = "https://github.com/jpcadena/autochain-bot"
keywords = ["python", "autochain", "bot", "data-science",
    "artificial-intelligence", "machine-learning", "deep-learning",
    "pydantic", "starlette", "model", "algorithm", "pandas",
    "clean-code", "ruff", "isort", "black-formatter", "mypy", "pytorch",
    "openai", "solid-principles"]
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: End Users/Desktop",
    "Intended Audience :: Information Technology",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Natural Language :: Spanish",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.11",
    "Topic :: Internet",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Software Development",
    "Typing :: Typed",
]
packages = [{ include = "autochain_bot" }]

[tool.poetry.dependencies]
python = "^3.11"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 80
target-version = ["py311"]
exclude = '''
(
    /(\venv
  | \.mypy_cache
  | \.ruff_cache
  | tests)/
)
'''
skip-string-normalization = true

[tool.mypy]
strict = true
python_version = "3.11"
show_error_codes = true
warn_redundant_casts = true
warn_unused_ignores = true
exclude = "venv|tests|.mypy_cache|.ruff_cache"
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_return_any = true
implicit_reexport = false
strict_optional = true
strict_equality = true
plugins = [
    "pydantic.mypy"
]
follow_imports = "silent"
no_implicit_reexport = true
ignore_missing_imports = true

[tool.mypy-tests]
ignore_errors = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[tool.isort]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 80
profile = "black"

[tool.ruff]
select = ["E", "F"]
ignore = []
fixable = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "EM", "ERA", "EXE", "FBT", "ICN", "INP", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PT", "PTH", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "TRY", "UP", "YTT"]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]
line-length = 80
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
target-version = "py311"

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.isort]
known-third-party = ["fastapi", "pydantic", "starlette"]

[tool.bandit]
tests = ["B201", "B301"]
skips = ["B101", "B601"]
